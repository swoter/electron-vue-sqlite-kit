@import "base";
@import "assets";
/*
 * @Descripttion: [display]
 */
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $value in $displays {
      .d-#{$infix}#{$value} {
        display: $value !important;
      }
    }
  }
}

@each $color, $value in $colors {
  .bg-#{$color} {
    @include background-set($value);
  }
}
/*
 * @Descripttion: [text color]
 */

@each $color, $value in $colors {
  .text-#{$color} {
    color: $value;
  }
}

/*
 * @Descripttion: [text align]
 */

@each $align in $aligns {
  .text-#{$align} {
    text-align: $align;
  }
}

/*
 * @Descripttion: [font size]
 */

@each $fontSize, $value in $font-sizes {
  .font-#{$fontSize} {
    font-size: $value;
  }
}

/*
 * @Descripttion: [width]
 */

@each $size, $value in $sizes {
  .w-#{$size} {
    width: $value;
  }
}

/*
 * @Descripttion: [round corner]
 */

@for $i from 1 through 5 {
  $px: $i * 5;
  .round-#{$px} {
    @include border-radius-set(#{$px}px);
  }
}
/*
 * @Descripttion: [border]
 */
@each $border, $value in $borders {
  .border-#{$border} {
    @if $value == 0 {
      border: 0;
    } @else if $value == 1 {
      border: 1px solid $border-color;
    } @else if type-of($value) ==string {
      border-style: $value !important;
    } @else {
      border: 0;
      border-#{$border}: 1px solid $border-color;
    }
  }
}
/*
 * @Descripttion: [padding]
 */

@for $i from 1 through 10 {
  $px: ($i - 1) * 10;
  .p-#{$px} {
    padding: #{$px}px !important;
  }
  .pl-#{$px} {
    padding-left: #{$px}px !important;
  }
  .pr-#{$px} {
    padding-right: #{$px}px !important;
  }
  .pt-#{$px} {
    padding-top: #{$px}px !important;
  }
  .pb-#{$px} {
    padding-bottom: #{$px}px !important;
  }
}

/*
 * @Descripttion: [margin]
 */
.m-auto {
  margin: auto !important;
}
.m-center {
  margin: 0 auto !important;
}
@for $i from 1 through 10 {
  $i: $i - 1;
  .m-#{$i} {
    margin: #{$i}px !important;
  }
  .ml-#{$i} {
    margin-left: #{$i}px !important;
  }
  .mr-#{$i} {
    margin-right: #{$i}px !important;
  }
  .mt-#{$i} {
    margin-top: #{$i}px !important;
  }
  .mb-#{$i} {
    margin-bottom: #{$i}px !important;
  }

  $px: $i * 10;
  .m-#{$px} {
    margin: #{$px}px !important;
  }
  .ml-#{$px} {
    margin-left: #{$px}px !important;
  }
  .mr-#{$px} {
    margin-right: #{$px}px !important;
  }
  .mt-#{$px} {
    margin-top: #{$px}px !important;
  }
  .mb-#{$px} {
    margin-bottom: #{$px}px !important;
  }
}

/*
 * @Descripttion: [flex]
 */

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .flex#{$infix}-row {
      flex-direction: row !important;
    }
    .flex#{$infix}-column {
      flex-direction: column !important;
    }
    .flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }
    .flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }

    .flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }
    .flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }
    .flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    .flex#{$infix}-fill {
      flex: 1 1 auto !important;
    }
    .flex#{$infix}-grow-0 {
      flex-grow: 0 !important;
    }
    .flex#{$infix}-grow-1 {
      flex-grow: 1 !important;
    }
    .flex#{$infix}-shrink-0 {
      flex-shrink: 0 !important;
    }
    .flex#{$infix}-shrink-1 {
      flex-shrink: 1 !important;
    }

    .justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }
    .justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }
    .justify-content#{$infix}-center {
      justify-content: center !important;
    }
    .justify-content#{$infix}-between {
      justify-content: space-between !important;
    }
    .justify-content#{$infix}-around {
      justify-content: space-around !important;
    }

    .align-items#{$infix}-start {
      align-items: flex-start !important;
    }
    .align-items#{$infix}-end {
      align-items: flex-end !important;
    }
    .align-items#{$infix}-center {
      align-items: center !important;
    }
    .align-items#{$infix}-baseline {
      align-items: baseline !important;
    }
    .align-items#{$infix}-stretch {
      align-items: stretch !important;
    }

    .align-content#{$infix}-start {
      align-content: flex-start !important;
    }
    .align-content#{$infix}-end {
      align-content: flex-end !important;
    }
    .align-content#{$infix}-center {
      align-content: center !important;
    }
    .align-content#{$infix}-between {
      align-content: space-between !important;
    }
    .align-content#{$infix}-around {
      align-content: space-around !important;
    }
    .align-content#{$infix}-stretch {
      align-content: stretch !important;
    }

    .align-self#{$infix}-auto {
      align-self: auto !important;
    }
    .align-self#{$infix}-start {
      align-self: flex-start !important;
    }
    .align-self#{$infix}-end {
      align-self: flex-end !important;
    }
    .align-self#{$infix}-center {
      align-self: center !important;
    }
    .align-self#{$infix}-baseline {
      align-self: baseline !important;
    }
    .align-self#{$infix}-stretch {
      align-self: stretch !important;
    }
  }
}

.container,
.container-fluid {
  @include make-container();
}

@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }

    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints {
      @if ($extend-breakpoint) {
        .container#{breakpoint-infix($name, $grid-breakpoints)} {
          @extend %responsive-container-#{$breakpoint};
        }

        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}

// Row
.row {
  @include make-row();
}

.no-gutters {
  margin-right: 0;
  margin-left: 0;

  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns();

@import "element-resets";

.ps__thumb-y {
  width: 2px !important;
}
.ps__rail-y.ps--clicking .ps__thumb-y,
.ps__rail-y:focus > .ps__thumb-y,
.ps__rail-y:hover > .ps__thumb-y,
.ps__rail-y {
  width: 5px !important;
}
